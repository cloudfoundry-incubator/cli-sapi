// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	"code.cloudfoundry.org/cli/api/cloudcontroller/ccv3"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeDeleteServiceBrokerActor struct {
	DeleteServiceBrokerStub        func(string) (v7action.Warnings, error)
	deleteServiceBrokerMutex       sync.RWMutex
	deleteServiceBrokerArgsForCall []struct {
		arg1 string
	}
	deleteServiceBrokerReturns struct {
		result1 v7action.Warnings
		result2 error
	}
	deleteServiceBrokerReturnsOnCall map[int]struct {
		result1 v7action.Warnings
		result2 error
	}
	GetServiceBrokerByNameStub        func(string) (ccv3.ServiceBroker, v7action.Warnings, error)
	getServiceBrokerByNameMutex       sync.RWMutex
	getServiceBrokerByNameArgsForCall []struct {
		arg1 string
	}
	getServiceBrokerByNameReturns struct {
		result1 ccv3.ServiceBroker
		result2 v7action.Warnings
		result3 error
	}
	getServiceBrokerByNameReturnsOnCall map[int]struct {
		result1 ccv3.ServiceBroker
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeleteServiceBrokerActor) DeleteServiceBroker(arg1 string) (v7action.Warnings, error) {
	fake.deleteServiceBrokerMutex.Lock()
	ret, specificReturn := fake.deleteServiceBrokerReturnsOnCall[len(fake.deleteServiceBrokerArgsForCall)]
	fake.deleteServiceBrokerArgsForCall = append(fake.deleteServiceBrokerArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteServiceBroker", []interface{}{arg1})
	fake.deleteServiceBrokerMutex.Unlock()
	if fake.DeleteServiceBrokerStub != nil {
		return fake.DeleteServiceBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDeleteServiceBrokerActor) DeleteServiceBrokerCallCount() int {
	fake.deleteServiceBrokerMutex.RLock()
	defer fake.deleteServiceBrokerMutex.RUnlock()
	return len(fake.deleteServiceBrokerArgsForCall)
}

func (fake *FakeDeleteServiceBrokerActor) DeleteServiceBrokerCalls(stub func(string) (v7action.Warnings, error)) {
	fake.deleteServiceBrokerMutex.Lock()
	defer fake.deleteServiceBrokerMutex.Unlock()
	fake.DeleteServiceBrokerStub = stub
}

func (fake *FakeDeleteServiceBrokerActor) DeleteServiceBrokerArgsForCall(i int) string {
	fake.deleteServiceBrokerMutex.RLock()
	defer fake.deleteServiceBrokerMutex.RUnlock()
	argsForCall := fake.deleteServiceBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDeleteServiceBrokerActor) DeleteServiceBrokerReturns(result1 v7action.Warnings, result2 error) {
	fake.deleteServiceBrokerMutex.Lock()
	defer fake.deleteServiceBrokerMutex.Unlock()
	fake.DeleteServiceBrokerStub = nil
	fake.deleteServiceBrokerReturns = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteServiceBrokerActor) DeleteServiceBrokerReturnsOnCall(i int, result1 v7action.Warnings, result2 error) {
	fake.deleteServiceBrokerMutex.Lock()
	defer fake.deleteServiceBrokerMutex.Unlock()
	fake.DeleteServiceBrokerStub = nil
	if fake.deleteServiceBrokerReturnsOnCall == nil {
		fake.deleteServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 v7action.Warnings
			result2 error
		})
	}
	fake.deleteServiceBrokerReturnsOnCall[i] = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeDeleteServiceBrokerActor) GetServiceBrokerByName(arg1 string) (ccv3.ServiceBroker, v7action.Warnings, error) {
	fake.getServiceBrokerByNameMutex.Lock()
	ret, specificReturn := fake.getServiceBrokerByNameReturnsOnCall[len(fake.getServiceBrokerByNameArgsForCall)]
	fake.getServiceBrokerByNameArgsForCall = append(fake.getServiceBrokerByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceBrokerByName", []interface{}{arg1})
	fake.getServiceBrokerByNameMutex.Unlock()
	if fake.GetServiceBrokerByNameStub != nil {
		return fake.GetServiceBrokerByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getServiceBrokerByNameReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeDeleteServiceBrokerActor) GetServiceBrokerByNameCallCount() int {
	fake.getServiceBrokerByNameMutex.RLock()
	defer fake.getServiceBrokerByNameMutex.RUnlock()
	return len(fake.getServiceBrokerByNameArgsForCall)
}

func (fake *FakeDeleteServiceBrokerActor) GetServiceBrokerByNameCalls(stub func(string) (ccv3.ServiceBroker, v7action.Warnings, error)) {
	fake.getServiceBrokerByNameMutex.Lock()
	defer fake.getServiceBrokerByNameMutex.Unlock()
	fake.GetServiceBrokerByNameStub = stub
}

func (fake *FakeDeleteServiceBrokerActor) GetServiceBrokerByNameArgsForCall(i int) string {
	fake.getServiceBrokerByNameMutex.RLock()
	defer fake.getServiceBrokerByNameMutex.RUnlock()
	argsForCall := fake.getServiceBrokerByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDeleteServiceBrokerActor) GetServiceBrokerByNameReturns(result1 ccv3.ServiceBroker, result2 v7action.Warnings, result3 error) {
	fake.getServiceBrokerByNameMutex.Lock()
	defer fake.getServiceBrokerByNameMutex.Unlock()
	fake.GetServiceBrokerByNameStub = nil
	fake.getServiceBrokerByNameReturns = struct {
		result1 ccv3.ServiceBroker
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDeleteServiceBrokerActor) GetServiceBrokerByNameReturnsOnCall(i int, result1 ccv3.ServiceBroker, result2 v7action.Warnings, result3 error) {
	fake.getServiceBrokerByNameMutex.Lock()
	defer fake.getServiceBrokerByNameMutex.Unlock()
	fake.GetServiceBrokerByNameStub = nil
	if fake.getServiceBrokerByNameReturnsOnCall == nil {
		fake.getServiceBrokerByNameReturnsOnCall = make(map[int]struct {
			result1 ccv3.ServiceBroker
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getServiceBrokerByNameReturnsOnCall[i] = struct {
		result1 ccv3.ServiceBroker
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDeleteServiceBrokerActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteServiceBrokerMutex.RLock()
	defer fake.deleteServiceBrokerMutex.RUnlock()
	fake.getServiceBrokerByNameMutex.RLock()
	defer fake.getServiceBrokerByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeleteServiceBrokerActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.DeleteServiceBrokerActor = new(FakeDeleteServiceBrokerActor)
